from PIL import Image as im
import numpy as np


def readBitmapFromFile(fileName):
    return np.asarray(im.open(fileName))


def readBitmaps():
    bitmaps = []
    for i in range(0, 2):
        for j in range(0, 10):
            bitmaps.append(readBitmapFromFile("pictures/samolot" + str(i) + str(j) + ".jpg"))
    bitmaps.append(readBitmapFromFile("pictures/samolot20.jpg"))
    return bitmaps


def writeBitmapToFile(bitmap):
    image = im.fromarray(np.uint8(bitmap))
    image.save("test.jpg")


def calculateAveragesRGBColor(bitmap):
    rSum, gSum, bSum = 0, 0, 0
    for row in bitmap:
        for column in row:
            rSum += column[0]
            gSum += column[1]
            bSum += column[2]
    pixelsCount = bitmap.shape[0] * bitmap.shape[1]
    return [rSum / pixelsCount, gSum / pixelsCount, bSum / pixelsCount]


def thresholding(bitmap, averagesRGB, stdRGB):
    bit = []
    for row in bitmap:
        rowColors = []
        for column in row:
            colors = []
            if (column[0] > averagesRGB[0] - stdRGB):
                colors.append(255)
            else:
                colors.append(column[0])
            if (column[1] > averagesRGB[1] - stdRGB):
                colors.append(255)
            else:
                colors.append(column[1])
            if (column[2] > averagesRGB[2] - stdRGB):
                colors.append(255)
            else:
                colors.append(column[2])
            rowColors.append(colors)
        bit.append(rowColors)
    return bit


def main():
    bitmaps = readBitmaps()
    bitmap = thresholding(bitmaps[1], calculateAveragesRGBColor(bitmaps[1]), np.std(bitmaps[1]))
    writeBitmapToFile(bitmap)


if __name__ == '__main__':
    main()
