from PIL import Image as im
import numpy as np
from scipy import ndimage
import skimage.morphology as mp
from skimage.filters.edges import convolve
from skimage import color

maskEdgeHorizontal = np.array([[1, 2, 1],
                               [0, 0, 0],
                               [-1, -2, -1]]) / 8
maskEdgeVertical = np.array([[1, 0, -1],
                             [2, 0, -2],
                             [1, 0, -1]]) / 8
maskDilatation = np.array([[0, 1, 0],
                           [1, 4, 1],
                           [0, 1, 0]]) / 9
maskErosion = np.array([[0, -1, 0],
                        [-1, 4, -1],
                        [0, -1, 0]]) / 8


def readBitmapFromFile(fileName):
    return np.asarray(im.open(fileName))


def readBitmaps():
    bitmaps = []
    fileNames = []
    for i in range(0, 2):
        for j in range(0, 10):
            fileNames.append("samolot" + str(i) + str(j) + ".jpg")
            bitmaps.append(readBitmapFromFile("pictures/samolot" + str(i) + str(j) + ".jpg"))
    fileNames.append("samolot20.jpg")
    bitmaps.append(readBitmapFromFile("pictures/samolot20.jpg"))
    return bitmaps, fileNames


def writeBitmapToFile(bitmap, fileName):
    image = im.fromarray(np.uint8(bitmap))
    path = "edges/" + fileName
    image.save(path)


def calculateAveragesRGBColor(bitmap):
    rSum, gSum, bSum = 0, 0, 0
    for row in bitmap:
        for column in row:
            rSum += column[0]
            gSum += column[1]
            bSum += column[2]
    pixelsCount = bitmap.shape[0] * bitmap.shape[1]
    return [rSum / pixelsCount, gSum / pixelsCount, bSum / pixelsCount]


def thresholding(bitmap, averagesRGB, stdRGB=0):
    thresholdingbitmap = []
    for row in bitmap:
        rowColors = []
        for column in row:
            colors = []
            if (column[0] > averagesRGB[0] - stdRGB):
                colors.append(255)
            else:
                colors.append(0)
            if (column[1] > averagesRGB[1] - stdRGB):
                colors.append(255)
            else:
                colors.append(0)
            if (column[2] > averagesRGB[2] - stdRGB):
                colors.append(255)
            else:
                colors.append(0)
            rowColors.append(colors)
        thresholdingbitmap.append(rowColors)
    return thresholdingbitmap


def createBitmapWithMask(bitmap, mask):
    return np.abs(convolve(bitmap, mask[:, :, None]))


def detectEdges(bitmap):
    detectBitmap = ndimage.sobel(bitmap)
    return detectBitmap


def rgbToGrayScale(bitmap):
    grayBitmap = []
    for row in bitmap:
        rowColors = []
        for column in row:
            avg = int(column[0]) + int(column[1]) + int(column[2])
            avg = int(avg / 3)
            rowColors.append([avg, avg, avg])
        grayBitmap.append(rowColors)
    return grayBitmap


def changeColorToWhite(bitmap):
    grayBitmap = []
    for row in bitmap:
        rowColors = []
        for column in row:
            r, g, b = column[0], column[1], column[2]
            if (column[0] != 255 or column[1] != 255 or column[2] != 255):
                r = 0
                g = 0
                b = 0
            rowColors.append([r, g, b])
        grayBitmap.append(rowColors)
    return grayBitmap


def createAllEdgeImage(bitmaps, fileNames):
    for i in range(0, len(bitmaps)):
        bitmap = thresholding(bitmaps[i], calculateAveragesRGBColor(bitmaps[i]), np.std(bitmaps[i]))
        # bitmap = createBitmapWithMask(bitmap,maskDilatation)
        #  bitmap = createBitmapWithMask(bitmap,maskErosion)
        bitmapHor = createBitmapWithMask(bitmap, maskEdgeHorizontal)
        bitmapVer = createBitmapWithMask(bitmap, maskEdgeVertical)
        bitmap = (bitmapHor + bitmapVer) / 2
        bitmap = thresholding(bitmap, calculateAveragesRGBColor(bitmap))
        bitmap = changeColorToWhite(bitmap)
        writeBitmapToFile(bitmap, fileNames[i])
        print("Skończyłem obraz nr", i)


def main():
    bitmaps, fileNames = readBitmaps()
    createAllEdgeImage(bitmaps, fileNames)


if __name__ == '__main__':
    main()
