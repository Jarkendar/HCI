from PIL import Image as im
import numpy as np
from scipy import ndimage
import skimage.morphology as mp
from skimage.filters.edges import convolve


def readBitmapFromFile(fileName):
    return np.asarray(im.open(fileName))


def readBitmaps():
    bitmaps = []
    for i in range(0, 2):
        for j in range(0, 10):
            bitmaps.append(readBitmapFromFile("pictures/samolot" + str(i) + str(j) + ".jpg"))
    bitmaps.append(readBitmapFromFile("pictures/samolot20.jpg"))
    return bitmaps


def writeBitmapToFile(bitmap):
    image = im.fromarray(np.uint8(bitmap))
    image.save("test.jpg")


def calculateAveragesRGBColor(bitmap):
    rSum, gSum, bSum = 0, 0, 0
    for row in bitmap:
        for column in row:
            rSum += column[0]
            gSum += column[1]
            bSum += column[2]
    pixelsCount = bitmap.shape[0] * bitmap.shape[1]
    return [rSum / pixelsCount, gSum / pixelsCount, bSum / pixelsCount]


def thresholding(bitmap, averagesRGB, stdRGB):
    thresholdingbitmap = []
    for row in bitmap:
        rowColors = []
        for column in row:
            colors = []
            if (column[0] > averagesRGB[0] - stdRGB):
                colors.append(255)
            else:
                colors.append(0)
            if (column[1] > averagesRGB[1] - stdRGB):
                colors.append(255)
            else:
                colors.append(0)
            if (column[2] > averagesRGB[2] - stdRGB):
                colors.append(255)
            else:
                colors.append(0)
            rowColors.append(colors)
        thresholdingbitmap.append(rowColors)
    return thresholdingbitmap


def createOnesMask(size):
    M = np.ones([size, size])
    M = M / (size ** 2)
    print(M)
    return M


def dilation(bitmap, mask):
    return np.abs(convolve(bitmap, mask[:, :, None]))


def detectEdges(bitmap):
    detectBitmap = ndimage.sobel(bitmap, 0)
    return detectBitmap


def main():
    bitmaps = readBitmaps()
    bitmap = thresholding(bitmaps[1], calculateAveragesRGBColor(bitmaps[1]), np.std(bitmaps[1]))
    bitmap = dilation(bitmap, createOnesMask(3))
    bitmap = dilation(bitmap, createOnesMask(3))
    bitmap = dilation(bitmap, createOnesMask(3))

    writeBitmapToFile(bitmap)


if __name__ == '__main__':
    main()
